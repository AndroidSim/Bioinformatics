#!/usr/bin/perl
#initialize paremter
$yes1="y";
$PRNT = 2;   #no printing 
$f_base =1;  #initial code
$SC = 8;




print "Prepare inequality for LP solver to train gaps\n";
print "===============================================\n";
print "Please print the follwing informations\n";
print "Print, DB:(hl,tr...) DB_fam (glob,ras,...)\n";
$line = <STDIN> ;
($db,$db_fam)=split(" ",$line);
print "DB is $db and FAM is $db_fam \n"; 
#
$f_seqF ="database/SEQ_".$db_fam;
$f_pdbF="FAM.pdb";
get_pdb_name($f_seqF,$f_pdbF); #create file containing  pdb name from chosen family.
open(FILEpdbF, $f_pdbF);
while($line_pdb=<FILEpdbF>) {
    ($pdb,$length)=split(" ",$line_pdb);
    print "========================\n";
    print "loop over : $pdb\n";
    print "========================\n";
    $f_code=$db_fam . "." . $f_base;
    if ($PRNT== 1){
print "Find homologs of pdbs in $f_seqF  using global structure and local sequence alignments? y/n \n";
$linex = <STDIN> ;
chop($linex);
print "$The answer was:$linex ($linex eq $yes1)\n";
    }
    else {
$linex=$yes1;
    }
    if ($linex eq $yes1) {
        print "find pdb homolog to $pdb in $db using loacl sequnece alignments\n";
reject_hom_db($pdb,$db,$db_fam);
$RMS=50;
$type = "-l";
print "find pdb homolog to $pdb in $db using structrue alignments\n";
get_stru2stru($pdb,$f_code,$db,$RMS,$type);
$f_hom = "FAM.hom";
$f_homD= "FAM." .$db ;
rename($f_hom,$f_homD);
$RMS=5; $type=" ";
print "find pdb very close homolog to $pdb in $db_fam of RMS <$RMS\n";
get_stru2stru($pdb,$f_code,$db_fam,$RMS,$type);
    }
    $n_hom_near = countL($f_hom);
    print "The number of near homolog was $n_hom_near\n";
    if ($n_hom_near>2) {
if ($PRNT== 1 || $PRNT==2){
    print "Produce homolog with gaps? y/n \n";
    print "================================\n";
    $linex = <STDIN>;
    chop($linex);
    print "The answer was:$linex ($linex eq $yes1)\n";
}
else {
    $linex=$yes1;
}
$n_gap = 0;
if ($linex eq $yes1) {
    print "get_align $pdb,$f_code,$db \n";
    get_align($pdb,$f_code,$db,$db_fam);
}
if ($PRNT== 1){
    print "Produce inequalities? y/n \n";
    print "===========================\n";
    $linex = <STDIN>;
    chop($linex);
    print "The answer was:$line ($linex eq $yes1)  \n";
}
else {
    $linex=$yes1;
}
print "############The number of prot with gaps was $n_gap\n";
if ($linex eq $yes1 && $n_gap > 0) {
    get_ineq($f_code);
            $f_base ++;                   # increase f_base if eq are generated.
}
    }
}
print "Exit set_ineq \n";
print "\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a"; # Alert 
#END MAIN

#=============================================================================
sub  get_stru2stru {
    my ($pdb, $f_code, $db_fam,$RMS, $type) = @_;
    print "execute get_strustr with $pdb $f_code $db_fam with rms < $RMS\n";
    $f_xyz = "XYZ";
    $f_seq = "SEQ";
    $f_best = "best.log";
    $YES  ="y";
    print "f_xyz = $f_xyz\n";
    if (-e $f_xyz) {
        print "rm $f_xyz \n";
system("rm $f_xyz");
    }
    if (-e $f_seq) {
        print "rm $f_seq \n";
system("rm $f_seq");
    }
    $f_xyzD = "database/XYZ_" . $db_fam ;
    $f_seqD = "database/SEQ_" . $db_fam ;
    system("ln -s $f_xyzD $f_xyz");
    system("ln -s $f_seqD $f_seq");
    $yes = "yes";
    $f_num=1;
    print "=====>loopp.exe -x SEQ -pick $pdb -family $f_num  $f_code  -i 2 -v -newCM  -tr $RMS  $type -best 50 \n";
    system("loopp.exe -x SEQ -pick $pdb -family $f_num  $f_code  -i 2 -v -newCM  -tr $RMS  $type -nprn 100 -best 50 ");
    if ($PRNT== 1){
    print " Print best.log? y/n \n";
    $line_s = <STDIN>;
    chop($line_s);
    print "The answer was : $line_s\n";
    if ($line_s eq $YES) {
      system("lpr -Psully $f_best");
  }
    }       
} 
#===========================================================================
sub get_ineq{
    my ($f_cod) = @_;
    print " get_ineq with $f_cod \n";
    $f_out = "decoy." . $f_cod;
    $f_outLB = "../BPMPD/decoyL." . $f_cod ;
    $f_outRB = "../BPMPD/decoyR." . $f_cod ;
    $f_scnB  = "../BPMPD/q_scan." . $f_cod ;
    $f_rhs   = "current.rhs";
    $f_xscan = "xscan.log";
    #output from get_align
    $f_xyzV  = "XYZ." .$f_cod;
    $f_seqV  = "SEQ." .$f_cod;
    $f_xyz   = "XYZ";
    $f_seq   = "SEQ";
    print "rm $f_xyz \n";
    system("rm $f_xyz");
    print "rm $f_seq \n";
    system("rm $f_seq");
    print "ln -s $f_xyzV $f_xyz \n";
    system("ln -s $f_xyzV $f_xyz");
    print "ln -s $f_seqV $f_seq \n";
    system("ln -s $f_seqV $f_seq");
    print "======>loopp.exe -q SEQ  -family $f_cod  -i 2 -v -newCM -w $f_out -newCM -frz 300\n";
    system("loopp.exe -q SEQ  -family $f_cod  -i 2 -v -newCM -w $f_out -newCM -frz 300");
    print "mv  $f_out $f_outLB \n"; 
    system("mv  $f_out $f_outLB");
    system("compress $f_outLB");
    print "mv $f_rhs  $f_outRB\n";
    system("mv $f_rhs  $f_outRB");
    system("compress $f_outRB");
    print "mv $f_xscan   $f_scn\n";
    system("mv $f_xscan   $f_scnB");
    system("compress  $f_scnB"); 
}

#=============================================================================
sub get_align{
    my  ($amino,$f_cod,$db,$db_fam) = @_;
    local($f_xyz,$f_seq,$f_xyzT,$f_seqT,$f_xyzD,$f_seqD);
    local($f_xyzE,$f_seqE,$f_xyzF,$f_seqF,$f_rejectF,$f_homD,$f_pdbF);
    print "Execute get_align with $amino $f_cod $db and $db_fam \n";
$f_xyzV = "XYZ." . $f_cod;
$f_seqV = "SEQ." . $f_cod;
if (-e $f_xyzV) {
  print "rm $f_xyzV \n";
  system("rm $f_xyzV");
}
if (-e $f_seqV) {
  print "rm $f_seqV \n";
  system("rm $f_seqV");
}


open(FILEhom,"FAM.hom");
$f_xyz = "XYZtgap";
$f_seq = "SEQtgap";
$f_xyzT = "XYZ." . $f_cod;
$f_seqT = "SEQ." . $f_cod;
$f_xyzD ="database/XYZ_".$db;
$f_seqD ="database/SEQ_".$db;
$f_xyzE ="database/XYZ_".$db . "E";
$f_seqE ="database/SEQ_".$db . "E";
$f_xyzF ="database/XYZ_".$db_fam;
$f_seqF ="database/SEQ_".$db_fam;
$f_rejectF="FAM.reject";
$f_homD   ="FAM." . $db ;
$f_pdbF="FAM.pdb";

if (-e $f_seqE) {
  print "rm $f_seqE \n";
  system("rm $f_seqE");
}if (-e $f_seqE) {
  print "rm $f_seqE \n";
  system("rm $f_seqE");
}
print "concat: $f_xyzD,$f_xyzF=>$f_xyzE\n";
concat($f_xyzD,$f_xyzF,$f_xyzE);
concat($f_seqD,$f_seqF,$f_seqE);
append($f_xyzE,$f_xyzT);          #XYZ.f_code = DB+FAM.
append($f_seqE,$f_seqT);          #SEQ.f_code = DB+FAM.
append($f_pdbF,f_rejectF);        #f_reject = homolog in FAM.
append($f_homD,$f_rejectF);       #f_reject += homolog in DB.
$N1 =1;
$N2 =2;
#
#
# skip representataive
$line0 = <FILEhom>;
while($line = <FILEhom>){
    ($kee,$hom_pdb)=split(" ",$line);
    $f_num=2;
    $f_align = "alignments.log";
    if ($line0 ne $line){
print "=====>loopp.exe -s SEQ -pick $hom_pdb $amino -family $f_num $f_cod -i 2  -v -l\n";
system("loopp.exe -s SEQ -pick $hom_pdb $amino -family $f_num  $f_cod -i 2   -v -l");
        
        if ($PRNT== 1){
print " =========================================================\n";
print " Print alignment on screan(1) on screan and printer (2)?  \n";
print " =========================================================\n";
$line_1 = <STDIN>;
if ($line_1 == $N1) {
    prn_to_screen($f_align);
}
if ($line_1 == $N2) {
    prn_to_screen($f_align);
    system("lpr -Psully $f_align");
}
print "\n ====================================\n";
print "\n Produce next alignment ? hit return \n";
print "\n ====================================\n";
        $line = <STDIN> ;
        }
        if (-s $f_seq) {       #file exsits with non zero size increase global n_gap
          $n_gap ++               ;
          if ($PRNT == 2){
          prn_to_screen($f_align);
          $line_1 = <STDIN>;
          system("lpr -Psully $f_align");
        }
        }
        print "n_gaps = $n_gap\n";
print  STDOUT  "================>append $f_xyz,$f_xyzT \n";
append($f_xyz,$f_xyzT);
print  STDOUT  "================>append $f_seq,$f_seqT\n";
append($f_seq,$f_seqT);
}
print  STDOUT  "================>append $f_xyzE $f_xyzT\n";
append($f_xyz,$f_xyzT);
print  STDOUT  "================>append $f_seqE $f_seqT\n";
append($f_seq,$f_seqT);
}
close(FILEhom);
# END OF get_align
}
#========================================================================
sub append {
    my  ($f1,$f2) = @_;
    open(FILE1,"$f1");
    open(FILE2,">>$f2");
    while($line1 = <FILE1>){
        print FILE2 "$line1";
    }
    close FILE1;
    close FILE2;
}
#==========================================================================
sub prn_to_screen{
    my ($f) = @_;
    print "prn_to_screen $f \n";
    open(FILE,"$f");
    while($line = <FILE>){
print STDOUT "$line";
    }
    close FILE;
}
#===========================================================================
sub get_pdb_name{
#   get amino name and length from $f and put it in $f1.
    my ($f,$f1)= @_;
    open(FILE,"$f");
    open(FILE1,">>$f1");
    $T=20;
    $NULL=" ";
    while($linef = <FILE>){
      ($amino, $length)=split(" ",$linef);
      $n1 = $length /20 +%length % 20; #compute number of lines
      if ($n1 ne 0) {              
  print FILE1 "$linef";
  for($i=0; $i < $n1 ;$i++){
      $linef=<FILE>;
  }
      }
    }
    close FILE;
    close FILE1;
}
#============================================================================
sub concat{
    my ($f1,$f2,$f3) = @_;
    open(FILE1,"$f1");
    open(FILE2,"$f2");
    open(FILE3,">$f3");
    while($line1=<FILE1>) {
print FILE3 "$line1";
    }
    while($line2=<FILE2>) {
print FILE3 "$line2";
    }
    close FILE1;
    close FILE2;
    close FILE3;
}
#============================================================================
sub countL{
    my ($f) = @_;
    local($n,$line);
$n=0;
open(FILEf,$f);
while ($line = <FILEf>){
 $n++ ;
}
    close FILEf;
$n;
}
#==============================================================================
sub reject_hom_db{
#   scan using  local sequence alignment to get in "FAM.reject" all homologs
#   of DB to a given pdb of z_score > 6.
#
    my ($pdb,$db,$db_fam) = @_;
    local($f_list,$f_xyz,$f_seq,$f_best,$line,$f_reject);
    local($hom,$dum1,$ene,$dum2,$z_score,$dum3 ,$dum4,$dum5);
    
    print "Reject homlog in DB using local sequence alignments with: $pdb,$db,$db_fam\n";

    $f_list = "database/SEQ_" . $db_fam;
    $f_xyz = "XYZ";
    $f_seq = "SEQ";
    $f_best = "best.log";
    $f_reject ="FAM.reject";
    $f_xyzD   =  "database/XYZ_" . $db;
    $f_seqD   =  "database/SEQ_" . $db;
    $f_xyzD = "database/XYZ_" . $db ;
    $f_seqD = "database/SEQ_" . $db ;
    
    if (-e $f_reject) {
        print "rm $f_reject \n";
system("rm $f_reject");
    }
    if (-e $f_xyz) {
        print "rm $f_xyz \n";
system("rm $f_xyz");
    }
    if (-e $f_seq) {
        print "rm $f_seq \n";
system("rm $f_seq");
    }

    print "ln -s $f_xyzD $f_xyz\n";
    system("ln -s $f_xyzD $f_xyz");
    print "ln -s $f_seqD $f_seq\n";
    system("ln -s $f_seqD $f_seq");

    print "====>loopp.exe -s $f_list -pick $pdb -l -i 2 -v\n";
    system("loopp.exe -s $f_list -pick $pdb -l -i 2 -v");

    open(FILEb,"$f_best");
    open(FILEr,">$f_reject");
    print "Take homolog with z_score greater then $SC in DB=$db \n";
    $line =  <FILEb>;
    $line =  <FILEb>;
    $line =  <FILEb>;
    while($line = <FILEb>){
($hom,$dum1,$ene,$dum2,$z_score,$dum3 ,$dum4,$dum5)=split(" ",$line);
if($z_score > $SC) {
            print "Homolog found in $db is $hom with z_score = $z_score\n";
    print FILEr "$hom\n" ;
        }
    }
    close FILEb;
    close FILEr;
}








